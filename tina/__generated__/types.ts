//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  statePage: StatePage;
  statePageConnection: StatePageConnection;
  loanPage: LoanPage;
  loanPageConnection: LoanPageConnection;
  legalPage: LegalPage;
  legalPageConnection: LegalPageConnection;
  blogPost: BlogPost;
  blogPostConnection: BlogPostConnection;
  globalSettings: GlobalSettings;
  globalSettingsConnection: GlobalSettingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStatePageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStatePageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<StatePageFilter>;
};


export type QueryLoanPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLoanPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LoanPageFilter>;
};


export type QueryLegalPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLegalPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LegalPageFilter>;
};


export type QueryBlogPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogPostFilter>;
};


export type QueryGlobalSettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalSettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalSettingsFilter>;
};

export type DocumentFilter = {
  statePage?: InputMaybe<StatePageFilter>;
  loanPage?: InputMaybe<LoanPageFilter>;
  legalPage?: InputMaybe<LegalPageFilter>;
  blogPost?: InputMaybe<BlogPostFilter>;
  globalSettings?: InputMaybe<GlobalSettingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = StatePage | LoanPage | LegalPage | BlogPost | GlobalSettings | Folder;

export type StatePageHero = {
  __typename?: 'StatePageHero';
  headline: Scalars['String']['output'];
  subheadline?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  imageAlt?: Maybe<Scalars['String']['output']>;
};

export type StatePageSeo = {
  __typename?: 'StatePageSeo';
  ogImage?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
};

export type StatePage = Node & Document & {
  __typename?: 'StatePage';
  title: Scalars['String']['output'];
  metaTitle: Scalars['String']['output'];
  metaDescription: Scalars['String']['output'];
  state: Scalars['String']['output'];
  stateAbbr: Scalars['String']['output'];
  hero?: Maybe<StatePageHero>;
  body?: Maybe<Scalars['JSON']['output']>;
  seo?: Maybe<StatePageSeo>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StatePageHeroFilter = {
  headline?: InputMaybe<StringFilter>;
  subheadline?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  imageAlt?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StatePageSeoFilter = {
  ogImage?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
};

export type StatePageFilter = {
  title?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  stateAbbr?: InputMaybe<StringFilter>;
  hero?: InputMaybe<StatePageHeroFilter>;
  body?: InputMaybe<RichTextFilter>;
  seo?: InputMaybe<StatePageSeoFilter>;
};

export type StatePageConnectionEdges = {
  __typename?: 'StatePageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<StatePage>;
};

export type StatePageConnection = Connection & {
  __typename?: 'StatePageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<StatePageConnectionEdges>>>;
};

export type LoanPageHero = {
  __typename?: 'LoanPageHero';
  headline?: Maybe<Scalars['String']['output']>;
  subheadline?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type LoanPageSeo = {
  __typename?: 'LoanPageSeo';
  keywords?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
};

export type LoanPage = Node & Document & {
  __typename?: 'LoanPage';
  title: Scalars['String']['output'];
  metaTitle: Scalars['String']['output'];
  metaDescription: Scalars['String']['output'];
  loanType: Scalars['String']['output'];
  hero?: Maybe<LoanPageHero>;
  seo?: Maybe<LoanPageSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type LoanPageHeroFilter = {
  headline?: InputMaybe<StringFilter>;
  subheadline?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type LoanPageSeoFilter = {
  keywords?: InputMaybe<StringFilter>;
  ogImage?: InputMaybe<StringFilter>;
};

export type LoanPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  loanType?: InputMaybe<StringFilter>;
  hero?: InputMaybe<LoanPageHeroFilter>;
  seo?: InputMaybe<LoanPageSeoFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type LoanPageConnectionEdges = {
  __typename?: 'LoanPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<LoanPage>;
};

export type LoanPageConnection = Connection & {
  __typename?: 'LoanPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LoanPageConnectionEdges>>>;
};

export type LegalPage = Node & Document & {
  __typename?: 'LegalPage';
  title: Scalars['String']['output'];
  metaTitle: Scalars['String']['output'];
  metaDescription: Scalars['String']['output'];
  lastUpdated?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type LegalPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  lastUpdated?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type LegalPageConnectionEdges = {
  __typename?: 'LegalPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<LegalPage>;
};

export type LegalPageConnection = Connection & {
  __typename?: 'LegalPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LegalPageConnectionEdges>>>;
};

export type BlogPost = Node & Document & {
  __typename?: 'BlogPost';
  title: Scalars['String']['output'];
  metaTitle?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  excerpt: Scalars['String']['output'];
  publishDate: Scalars['String']['output'];
  author: Scalars['String']['output'];
  featuredImage?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogPostBodyCalloutFilter = {
  type?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
};

export type BlogPostBodyFilter = {
  callout?: InputMaybe<BlogPostBodyCalloutFilter>;
};

export type BlogPostFilter = {
  title?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<StringFilter>;
  featuredImage?: InputMaybe<ImageFilter>;
  category?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<BlogPostBodyFilter>;
};

export type BlogPostConnectionEdges = {
  __typename?: 'BlogPostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<BlogPost>;
};

export type BlogPostConnection = Connection & {
  __typename?: 'BlogPostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogPostConnectionEdges>>>;
};

export type GlobalSettingsHeader = {
  __typename?: 'GlobalSettingsHeader';
  phone?: Maybe<Scalars['String']['output']>;
  clientLoginUrl?: Maybe<Scalars['String']['output']>;
  applyOnlineUrl?: Maybe<Scalars['String']['output']>;
};

export type GlobalSettingsFooterSocial = {
  __typename?: 'GlobalSettingsFooterSocial';
  facebook?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
};

export type GlobalSettingsFooter = {
  __typename?: 'GlobalSettingsFooter';
  nmls?: Maybe<Scalars['String']['output']>;
  companyName?: Maybe<Scalars['String']['output']>;
  tagline?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
  social?: Maybe<GlobalSettingsFooterSocial>;
};

export type GlobalSettingsSeo = {
  __typename?: 'GlobalSettingsSeo';
  siteName?: Maybe<Scalars['String']['output']>;
  siteUrl?: Maybe<Scalars['String']['output']>;
  defaultOgImage?: Maybe<Scalars['String']['output']>;
};

export type GlobalSettings = Node & Document & {
  __typename?: 'GlobalSettings';
  header?: Maybe<GlobalSettingsHeader>;
  footer?: Maybe<GlobalSettingsFooter>;
  seo?: Maybe<GlobalSettingsSeo>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type GlobalSettingsHeaderFilter = {
  phone?: InputMaybe<StringFilter>;
  clientLoginUrl?: InputMaybe<StringFilter>;
  applyOnlineUrl?: InputMaybe<StringFilter>;
};

export type GlobalSettingsFooterSocialFilter = {
  facebook?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
};

export type GlobalSettingsFooterFilter = {
  nmls?: InputMaybe<StringFilter>;
  companyName?: InputMaybe<StringFilter>;
  tagline?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  social?: InputMaybe<GlobalSettingsFooterSocialFilter>;
};

export type GlobalSettingsSeoFilter = {
  siteName?: InputMaybe<StringFilter>;
  siteUrl?: InputMaybe<StringFilter>;
  defaultOgImage?: InputMaybe<StringFilter>;
};

export type GlobalSettingsFilter = {
  header?: InputMaybe<GlobalSettingsHeaderFilter>;
  footer?: InputMaybe<GlobalSettingsFooterFilter>;
  seo?: InputMaybe<GlobalSettingsSeoFilter>;
};

export type GlobalSettingsConnectionEdges = {
  __typename?: 'GlobalSettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<GlobalSettings>;
};

export type GlobalSettingsConnection = Connection & {
  __typename?: 'GlobalSettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GlobalSettingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateStatePage: StatePage;
  createStatePage: StatePage;
  updateLoanPage: LoanPage;
  createLoanPage: LoanPage;
  updateLegalPage: LegalPage;
  createLegalPage: LegalPage;
  updateBlogPost: BlogPost;
  createBlogPost: BlogPost;
  updateGlobalSettings: GlobalSettings;
  createGlobalSettings: GlobalSettings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateStatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: StatePageMutation;
};


export type MutationCreateStatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: StatePageMutation;
};


export type MutationUpdateLoanPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LoanPageMutation;
};


export type MutationCreateLoanPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LoanPageMutation;
};


export type MutationUpdateLegalPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LegalPageMutation;
};


export type MutationCreateLegalPageArgs = {
  relativePath: Scalars['String']['input'];
  params: LegalPageMutation;
};


export type MutationUpdateBlogPostArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogPostMutation;
};


export type MutationCreateBlogPostArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogPostMutation;
};


export type MutationUpdateGlobalSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalSettingsMutation;
};


export type MutationCreateGlobalSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalSettingsMutation;
};

export type DocumentUpdateMutation = {
  statePage?: InputMaybe<StatePageMutation>;
  loanPage?: InputMaybe<LoanPageMutation>;
  legalPage?: InputMaybe<LegalPageMutation>;
  blogPost?: InputMaybe<BlogPostMutation>;
  globalSettings?: InputMaybe<GlobalSettingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  statePage?: InputMaybe<StatePageMutation>;
  loanPage?: InputMaybe<LoanPageMutation>;
  legalPage?: InputMaybe<LegalPageMutation>;
  blogPost?: InputMaybe<BlogPostMutation>;
  globalSettings?: InputMaybe<GlobalSettingsMutation>;
};

export type StatePageHeroMutation = {
  headline?: InputMaybe<Scalars['String']['input']>;
  subheadline?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  imageAlt?: InputMaybe<Scalars['String']['input']>;
};

export type StatePageSeoMutation = {
  ogImage?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
};

export type StatePageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  stateAbbr?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<StatePageHeroMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  seo?: InputMaybe<StatePageSeoMutation>;
};

export type LoanPageHeroMutation = {
  headline?: InputMaybe<Scalars['String']['input']>;
  subheadline?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type LoanPageSeoMutation = {
  keywords?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
};

export type LoanPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  loanType?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<LoanPageHeroMutation>;
  seo?: InputMaybe<LoanPageSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type LegalPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  lastUpdated?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type BlogPostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  publishDate?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  featuredImage?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type GlobalSettingsHeaderMutation = {
  phone?: InputMaybe<Scalars['String']['input']>;
  clientLoginUrl?: InputMaybe<Scalars['String']['input']>;
  applyOnlineUrl?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalSettingsFooterSocialMutation = {
  facebook?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalSettingsFooterMutation = {
  nmls?: InputMaybe<Scalars['String']['input']>;
  companyName?: InputMaybe<Scalars['String']['input']>;
  tagline?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  social?: InputMaybe<GlobalSettingsFooterSocialMutation>;
};

export type GlobalSettingsSeoMutation = {
  siteName?: InputMaybe<Scalars['String']['input']>;
  siteUrl?: InputMaybe<Scalars['String']['input']>;
  defaultOgImage?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalSettingsMutation = {
  header?: InputMaybe<GlobalSettingsHeaderMutation>;
  footer?: InputMaybe<GlobalSettingsFooterMutation>;
  seo?: InputMaybe<GlobalSettingsSeoMutation>;
};

export type StatePagePartsFragment = { __typename: 'StatePage', title: string, metaTitle: string, metaDescription: string, state: string, stateAbbr: string, body?: any | null, hero?: { __typename: 'StatePageHero', headline: string, subheadline?: string | null, image?: string | null, imageAlt?: string | null } | null, seo?: { __typename: 'StatePageSeo', ogImage?: string | null, keywords?: string | null } | null };

export type LoanPagePartsFragment = { __typename: 'LoanPage', title: string, metaTitle: string, metaDescription: string, loanType: string, body?: any | null, hero?: { __typename: 'LoanPageHero', headline?: string | null, subheadline?: string | null, image?: string | null } | null, seo?: { __typename: 'LoanPageSeo', keywords?: string | null, ogImage?: string | null } | null };

export type LegalPagePartsFragment = { __typename: 'LegalPage', title: string, metaTitle: string, metaDescription: string, lastUpdated?: string | null, body?: any | null };

export type BlogPostPartsFragment = { __typename: 'BlogPost', title: string, metaTitle?: string | null, metaDescription?: string | null, excerpt: string, publishDate: string, author: string, featuredImage?: string | null, category?: string | null, tags?: Array<string | null> | null, body?: any | null };

export type GlobalSettingsPartsFragment = { __typename: 'GlobalSettings', header?: { __typename: 'GlobalSettingsHeader', phone?: string | null, clientLoginUrl?: string | null, applyOnlineUrl?: string | null } | null, footer?: { __typename: 'GlobalSettingsFooter', nmls?: string | null, companyName?: string | null, tagline?: string | null, address?: string | null, social?: { __typename: 'GlobalSettingsFooterSocial', facebook?: string | null, linkedin?: string | null, twitter?: string | null } | null } | null, seo?: { __typename: 'GlobalSettingsSeo', siteName?: string | null, siteUrl?: string | null, defaultOgImage?: string | null } | null };

export type StatePageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type StatePageQuery = { __typename?: 'Query', statePage: { __typename: 'StatePage', id: string, title: string, metaTitle: string, metaDescription: string, state: string, stateAbbr: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'StatePageHero', headline: string, subheadline?: string | null, image?: string | null, imageAlt?: string | null } | null, seo?: { __typename: 'StatePageSeo', ogImage?: string | null, keywords?: string | null } | null } };

export type StatePageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<StatePageFilter>;
}>;


export type StatePageConnectionQuery = { __typename?: 'Query', statePageConnection: { __typename?: 'StatePageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'StatePageConnectionEdges', cursor: string, node?: { __typename: 'StatePage', id: string, title: string, metaTitle: string, metaDescription: string, state: string, stateAbbr: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'StatePageHero', headline: string, subheadline?: string | null, image?: string | null, imageAlt?: string | null } | null, seo?: { __typename: 'StatePageSeo', ogImage?: string | null, keywords?: string | null } | null } | null } | null> | null } };

export type LoanPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LoanPageQuery = { __typename?: 'Query', loanPage: { __typename: 'LoanPage', id: string, title: string, metaTitle: string, metaDescription: string, loanType: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'LoanPageHero', headline?: string | null, subheadline?: string | null, image?: string | null } | null, seo?: { __typename: 'LoanPageSeo', keywords?: string | null, ogImage?: string | null } | null } };

export type LoanPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LoanPageFilter>;
}>;


export type LoanPageConnectionQuery = { __typename?: 'Query', loanPageConnection: { __typename?: 'LoanPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LoanPageConnectionEdges', cursor: string, node?: { __typename: 'LoanPage', id: string, title: string, metaTitle: string, metaDescription: string, loanType: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'LoanPageHero', headline?: string | null, subheadline?: string | null, image?: string | null } | null, seo?: { __typename: 'LoanPageSeo', keywords?: string | null, ogImage?: string | null } | null } | null } | null> | null } };

export type LegalPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LegalPageQuery = { __typename?: 'Query', legalPage: { __typename: 'LegalPage', id: string, title: string, metaTitle: string, metaDescription: string, lastUpdated?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type LegalPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LegalPageFilter>;
}>;


export type LegalPageConnectionQuery = { __typename?: 'Query', legalPageConnection: { __typename?: 'LegalPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LegalPageConnectionEdges', cursor: string, node?: { __typename: 'LegalPage', id: string, title: string, metaTitle: string, metaDescription: string, lastUpdated?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type BlogPostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogPostQuery = { __typename?: 'Query', blogPost: { __typename: 'BlogPost', id: string, title: string, metaTitle?: string | null, metaDescription?: string | null, excerpt: string, publishDate: string, author: string, featuredImage?: string | null, category?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogPostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogPostFilter>;
}>;


export type BlogPostConnectionQuery = { __typename?: 'Query', blogPostConnection: { __typename?: 'BlogPostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogPostConnectionEdges', cursor: string, node?: { __typename: 'BlogPost', id: string, title: string, metaTitle?: string | null, metaDescription?: string | null, excerpt: string, publishDate: string, author: string, featuredImage?: string | null, category?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type GlobalSettingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GlobalSettingsQuery = { __typename?: 'Query', globalSettings: { __typename: 'GlobalSettings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalSettingsHeader', phone?: string | null, clientLoginUrl?: string | null, applyOnlineUrl?: string | null } | null, footer?: { __typename: 'GlobalSettingsFooter', nmls?: string | null, companyName?: string | null, tagline?: string | null, address?: string | null, social?: { __typename: 'GlobalSettingsFooterSocial', facebook?: string | null, linkedin?: string | null, twitter?: string | null } | null } | null, seo?: { __typename: 'GlobalSettingsSeo', siteName?: string | null, siteUrl?: string | null, defaultOgImage?: string | null } | null } };

export type GlobalSettingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalSettingsFilter>;
}>;


export type GlobalSettingsConnectionQuery = { __typename?: 'Query', globalSettingsConnection: { __typename?: 'GlobalSettingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalSettingsConnectionEdges', cursor: string, node?: { __typename: 'GlobalSettings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalSettingsHeader', phone?: string | null, clientLoginUrl?: string | null, applyOnlineUrl?: string | null } | null, footer?: { __typename: 'GlobalSettingsFooter', nmls?: string | null, companyName?: string | null, tagline?: string | null, address?: string | null, social?: { __typename: 'GlobalSettingsFooterSocial', facebook?: string | null, linkedin?: string | null, twitter?: string | null } | null } | null, seo?: { __typename: 'GlobalSettingsSeo', siteName?: string | null, siteUrl?: string | null, defaultOgImage?: string | null } | null } | null } | null> | null } };

export const StatePagePartsFragmentDoc = gql`
    fragment StatePageParts on StatePage {
  __typename
  title
  metaTitle
  metaDescription
  state
  stateAbbr
  hero {
    __typename
    headline
    subheadline
    image
    imageAlt
  }
  body
  seo {
    __typename
    ogImage
    keywords
  }
}
    `;
export const LoanPagePartsFragmentDoc = gql`
    fragment LoanPageParts on LoanPage {
  __typename
  title
  metaTitle
  metaDescription
  loanType
  hero {
    __typename
    headline
    subheadline
    image
  }
  seo {
    __typename
    keywords
    ogImage
  }
  body
}
    `;
export const LegalPagePartsFragmentDoc = gql`
    fragment LegalPageParts on LegalPage {
  __typename
  title
  metaTitle
  metaDescription
  lastUpdated
  body
}
    `;
export const BlogPostPartsFragmentDoc = gql`
    fragment BlogPostParts on BlogPost {
  __typename
  title
  metaTitle
  metaDescription
  excerpt
  publishDate
  author
  featuredImage
  category
  tags
  body
}
    `;
export const GlobalSettingsPartsFragmentDoc = gql`
    fragment GlobalSettingsParts on GlobalSettings {
  __typename
  header {
    __typename
    phone
    clientLoginUrl
    applyOnlineUrl
  }
  footer {
    __typename
    nmls
    companyName
    tagline
    address
    social {
      __typename
      facebook
      linkedin
      twitter
    }
  }
  seo {
    __typename
    siteName
    siteUrl
    defaultOgImage
  }
}
    `;
export const StatePageDocument = gql`
    query statePage($relativePath: String!) {
  statePage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...StatePageParts
  }
}
    ${StatePagePartsFragmentDoc}`;
export const StatePageConnectionDocument = gql`
    query statePageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: StatePageFilter) {
  statePageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...StatePageParts
      }
    }
  }
}
    ${StatePagePartsFragmentDoc}`;
export const LoanPageDocument = gql`
    query loanPage($relativePath: String!) {
  loanPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LoanPageParts
  }
}
    ${LoanPagePartsFragmentDoc}`;
export const LoanPageConnectionDocument = gql`
    query loanPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LoanPageFilter) {
  loanPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LoanPageParts
      }
    }
  }
}
    ${LoanPagePartsFragmentDoc}`;
export const LegalPageDocument = gql`
    query legalPage($relativePath: String!) {
  legalPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LegalPageParts
  }
}
    ${LegalPagePartsFragmentDoc}`;
export const LegalPageConnectionDocument = gql`
    query legalPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LegalPageFilter) {
  legalPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LegalPageParts
      }
    }
  }
}
    ${LegalPagePartsFragmentDoc}`;
export const BlogPostDocument = gql`
    query blogPost($relativePath: String!) {
  blogPost(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogPostParts
  }
}
    ${BlogPostPartsFragmentDoc}`;
export const BlogPostConnectionDocument = gql`
    query blogPostConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogPostFilter) {
  blogPostConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogPostParts
      }
    }
  }
}
    ${BlogPostPartsFragmentDoc}`;
export const GlobalSettingsDocument = gql`
    query globalSettings($relativePath: String!) {
  globalSettings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalSettingsParts
  }
}
    ${GlobalSettingsPartsFragmentDoc}`;
export const GlobalSettingsConnectionDocument = gql`
    query globalSettingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalSettingsFilter) {
  globalSettingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalSettingsParts
      }
    }
  }
}
    ${GlobalSettingsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      statePage(variables: StatePageQueryVariables, options?: C): Promise<{data: StatePageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StatePageQueryVariables, query: string}> {
        return requester<{data: StatePageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StatePageQueryVariables, query: string}, StatePageQueryVariables>(StatePageDocument, variables, options);
      },
    statePageConnection(variables?: StatePageConnectionQueryVariables, options?: C): Promise<{data: StatePageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StatePageConnectionQueryVariables, query: string}> {
        return requester<{data: StatePageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StatePageConnectionQueryVariables, query: string}, StatePageConnectionQueryVariables>(StatePageConnectionDocument, variables, options);
      },
    loanPage(variables: LoanPageQueryVariables, options?: C): Promise<{data: LoanPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LoanPageQueryVariables, query: string}> {
        return requester<{data: LoanPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LoanPageQueryVariables, query: string}, LoanPageQueryVariables>(LoanPageDocument, variables, options);
      },
    loanPageConnection(variables?: LoanPageConnectionQueryVariables, options?: C): Promise<{data: LoanPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LoanPageConnectionQueryVariables, query: string}> {
        return requester<{data: LoanPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LoanPageConnectionQueryVariables, query: string}, LoanPageConnectionQueryVariables>(LoanPageConnectionDocument, variables, options);
      },
    legalPage(variables: LegalPageQueryVariables, options?: C): Promise<{data: LegalPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalPageQueryVariables, query: string}> {
        return requester<{data: LegalPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalPageQueryVariables, query: string}, LegalPageQueryVariables>(LegalPageDocument, variables, options);
      },
    legalPageConnection(variables?: LegalPageConnectionQueryVariables, options?: C): Promise<{data: LegalPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalPageConnectionQueryVariables, query: string}> {
        return requester<{data: LegalPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalPageConnectionQueryVariables, query: string}, LegalPageConnectionQueryVariables>(LegalPageConnectionDocument, variables, options);
      },
    blogPost(variables: BlogPostQueryVariables, options?: C): Promise<{data: BlogPostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostQueryVariables, query: string}> {
        return requester<{data: BlogPostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostQueryVariables, query: string}, BlogPostQueryVariables>(BlogPostDocument, variables, options);
      },
    blogPostConnection(variables?: BlogPostConnectionQueryVariables, options?: C): Promise<{data: BlogPostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostConnectionQueryVariables, query: string}> {
        return requester<{data: BlogPostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogPostConnectionQueryVariables, query: string}, BlogPostConnectionQueryVariables>(BlogPostConnectionDocument, variables, options);
      },
    globalSettings(variables: GlobalSettingsQueryVariables, options?: C): Promise<{data: GlobalSettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalSettingsQueryVariables, query: string}> {
        return requester<{data: GlobalSettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalSettingsQueryVariables, query: string}, GlobalSettingsQueryVariables>(GlobalSettingsDocument, variables, options);
      },
    globalSettingsConnection(variables?: GlobalSettingsConnectionQueryVariables, options?: C): Promise<{data: GlobalSettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalSettingsConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalSettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalSettingsConnectionQueryVariables, query: string}, GlobalSettingsConnectionQueryVariables>(GlobalSettingsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  