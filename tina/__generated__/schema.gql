# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  statePage(relativePath: String): StatePage!
  statePageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StatePageFilter): StatePageConnection!
  loanPage(relativePath: String): LoanPage!
  loanPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LoanPageFilter): LoanPageConnection!
  blogPost(relativePath: String): BlogPost!
  blogPostConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogPostFilter): BlogPostConnection!
  globalSettings(relativePath: String): GlobalSettings!
  globalSettingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalSettingsFilter): GlobalSettingsConnection!
}

input DocumentFilter {
  statePage: StatePageFilter
  loanPage: LoanPageFilter
  blogPost: BlogPostFilter
  globalSettings: GlobalSettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = StatePage | LoanPage | BlogPost | GlobalSettings | Folder

type StatePageHero {
  headline: String!
  subheadline: String
  image: String
  imageAlt: String
}

type StatePageSeo {
  ogImage: String
  keywords: String
}

type StatePage implements Node & Document {
  title: String!
  metaTitle: String!
  metaDescription: String!
  state: String!
  stateAbbr: String!
  hero: StatePageHero
  body: JSON
  seo: StatePageSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StatePageHeroFilter {
  headline: StringFilter
  subheadline: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input StatePageSeoFilter {
  ogImage: StringFilter
  keywords: StringFilter
}

input StatePageFilter {
  title: StringFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
  state: StringFilter
  stateAbbr: StringFilter
  hero: StatePageHeroFilter
  body: RichTextFilter
  seo: StatePageSeoFilter
}

type StatePageConnectionEdges {
  cursor: String!
  node: StatePage
}

type StatePageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StatePageConnectionEdges]
}

type LoanPageHero {
  headline: String
  subheadline: String
  image: String
}

type LoanPage implements Node & Document {
  title: String!
  metaTitle: String!
  metaDescription: String!
  loanType: String!
  hero: LoanPageHero
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LoanPageHeroFilter {
  headline: StringFilter
  subheadline: StringFilter
  image: ImageFilter
}

input LoanPageFilter {
  title: StringFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
  loanType: StringFilter
  hero: LoanPageHeroFilter
  body: RichTextFilter
}

type LoanPageConnectionEdges {
  cursor: String!
  node: LoanPage
}

type LoanPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LoanPageConnectionEdges]
}

type BlogPost implements Node & Document {
  title: String!
  metaTitle: String
  metaDescription: String
  excerpt: String!
  publishDate: String!
  author: String!
  featuredImage: String
  category: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogPostBodyCalloutFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
}

input BlogPostBodyFilter {
  callout: BlogPostBodyCalloutFilter
}

input BlogPostFilter {
  title: StringFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
  excerpt: StringFilter
  publishDate: DatetimeFilter
  author: StringFilter
  featuredImage: ImageFilter
  category: StringFilter
  tags: StringFilter
  body: BlogPostBodyFilter
}

type BlogPostConnectionEdges {
  cursor: String!
  node: BlogPost
}

type BlogPostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogPostConnectionEdges]
}

type GlobalSettingsHeader {
  phone: String
  clientLoginUrl: String
  applyOnlineUrl: String
}

type GlobalSettingsFooterSocial {
  facebook: String
  linkedin: String
  twitter: String
}

type GlobalSettingsFooter {
  nmls: String
  companyName: String
  tagline: String
  address: String
  social: GlobalSettingsFooterSocial
}

type GlobalSettingsSeo {
  siteName: String
  siteUrl: String
  defaultOgImage: String
}

type GlobalSettings implements Node & Document {
  header: GlobalSettingsHeader
  footer: GlobalSettingsFooter
  seo: GlobalSettingsSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalSettingsHeaderFilter {
  phone: StringFilter
  clientLoginUrl: StringFilter
  applyOnlineUrl: StringFilter
}

input GlobalSettingsFooterSocialFilter {
  facebook: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
}

input GlobalSettingsFooterFilter {
  nmls: StringFilter
  companyName: StringFilter
  tagline: StringFilter
  address: StringFilter
  social: GlobalSettingsFooterSocialFilter
}

input GlobalSettingsSeoFilter {
  siteName: StringFilter
  siteUrl: StringFilter
  defaultOgImage: StringFilter
}

input GlobalSettingsFilter {
  header: GlobalSettingsHeaderFilter
  footer: GlobalSettingsFooterFilter
  seo: GlobalSettingsSeoFilter
}

type GlobalSettingsConnectionEdges {
  cursor: String!
  node: GlobalSettings
}

type GlobalSettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalSettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateStatePage(relativePath: String!, params: StatePageMutation!): StatePage!
  createStatePage(relativePath: String!, params: StatePageMutation!): StatePage!
  updateLoanPage(relativePath: String!, params: LoanPageMutation!): LoanPage!
  createLoanPage(relativePath: String!, params: LoanPageMutation!): LoanPage!
  updateBlogPost(relativePath: String!, params: BlogPostMutation!): BlogPost!
  createBlogPost(relativePath: String!, params: BlogPostMutation!): BlogPost!
  updateGlobalSettings(relativePath: String!, params: GlobalSettingsMutation!): GlobalSettings!
  createGlobalSettings(relativePath: String!, params: GlobalSettingsMutation!): GlobalSettings!
}

input DocumentUpdateMutation {
  statePage: StatePageMutation
  loanPage: LoanPageMutation
  blogPost: BlogPostMutation
  globalSettings: GlobalSettingsMutation
  relativePath: String
}

input DocumentMutation {
  statePage: StatePageMutation
  loanPage: LoanPageMutation
  blogPost: BlogPostMutation
  globalSettings: GlobalSettingsMutation
}

input StatePageHeroMutation {
  headline: String
  subheadline: String
  image: String
  imageAlt: String
}

input StatePageSeoMutation {
  ogImage: String
  keywords: String
}

input StatePageMutation {
  title: String
  metaTitle: String
  metaDescription: String
  state: String
  stateAbbr: String
  hero: StatePageHeroMutation
  body: JSON
  seo: StatePageSeoMutation
}

input LoanPageHeroMutation {
  headline: String
  subheadline: String
  image: String
}

input LoanPageMutation {
  title: String
  metaTitle: String
  metaDescription: String
  loanType: String
  hero: LoanPageHeroMutation
  body: JSON
}

input BlogPostMutation {
  title: String
  metaTitle: String
  metaDescription: String
  excerpt: String
  publishDate: String
  author: String
  featuredImage: String
  category: String
  tags: [String]
  body: JSON
}

input GlobalSettingsHeaderMutation {
  phone: String
  clientLoginUrl: String
  applyOnlineUrl: String
}

input GlobalSettingsFooterSocialMutation {
  facebook: String
  linkedin: String
  twitter: String
}

input GlobalSettingsFooterMutation {
  nmls: String
  companyName: String
  tagline: String
  address: String
  social: GlobalSettingsFooterSocialMutation
}

input GlobalSettingsSeoMutation {
  siteName: String
  siteUrl: String
  defaultOgImage: String
}

input GlobalSettingsMutation {
  header: GlobalSettingsHeaderMutation
  footer: GlobalSettingsFooterMutation
  seo: GlobalSettingsSeoMutation
}

schema {
  query: Query
  mutation: Mutation
}
